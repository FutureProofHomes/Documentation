{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the FutureProofHomes Documentation page. Our goal is to help you get the most out of the FutureProofHomes voice assistant hardware and software so that you can control your smart home with your voice and your own private AI. In fact, that's our slogan!</p> <p> </p>"},{"location":"#a-quick-note-about-modular-hardware-design","title":"A Quick Note About Modular Hardware Design","text":"<p>Most customers think in terms of complete \"products\u201d.  So, at FutureProofHomes we will sell complete pre-assembled products.  However, unlike most hardware companies, our products will comprise of \"modules\", and each module is made up of \"components\u201d.  In simple terms, we like to think of FutureProofHomes as the \u201cIkea of hardware\u201d.</p> <p>Good modular hardware design allows us to quickly iterate our products and innovate faster than monolithic hardware companies. It also allows our customers to easily repair and upgrade their products. And finally, it also helps us assure our customers that we will avoid the pitfalls of planned obsolescence which many hardware companies fall into.</p> <p>In summary, a strong modular design strategy helps us keep a competitive advantage and adhere to our core principles.</p>"},{"location":"#need-more-help","title":"Need More Help?","text":"<p>While we hope this documentation will answer all your questions, we realize support is sometimes needed. The FutureProofHomes team will do their best to keep up with support requests, but we also lean on our community to help all of us. See the links below and decide which method of support is best for your needs.</p> <p>Have a general question and need quick help from the community?</p> <p>Chat with the Community on Discord </p> <p>Do you have a feature request you'd love to see?</p> <p>Look through our existing Feature Requests first, then open a new request if necessary:  Request a New Feature on Github </p> <p>Have you found a reproducible issue with the hardware or software?</p> <p>Report a Bug on Github </p>"},{"location":"ai-base-station-introduction/","title":"Introduction","text":"<p>We\u2019ve been cooking up something special in the lab \u2014 a local AI server built to power our Satellite1 products with speed and affordability. Right now, we\u2019re deep in supplier talks and putting the system through intense internal testing as we gear up for a private beta (and then, the big launch). Stay tuned!</p> Front view of functional early prototype AI Base Station Back view of AI Base Station"},{"location":"satellite1-amplifier-module-overview/","title":"Amplifier1 Module","text":""},{"location":"satellite1-amplifier-module-overview/#amp1-module-coming-soon","title":"Amp1 Module (Coming Soon...)","text":""},{"location":"satellite1-assembly/","title":"PCB Assembly","text":""},{"location":"satellite1-assembly/#connect-the-pcbs","title":"Connect the PCBs","text":"<p>The Satellite1 comes in 2 pieces: </p> <ol> <li>The \"Hat\" (round board)</li> <li>The \"Core\" (rectangular board)</li> </ol> <p>You'll notice a standard Raspberry Pi 40-pin header on the Hat board (marked in red). Carefully align the Core board's 2 rows of pins with the Hat's 40 pin connector and press them together.</p> <p>Press Firmly!</p> <p>The 40-pin should poke through the top of the HAT so that it feels like reading braille with your fingers.</p> <p></p>"},{"location":"satellite1-assembly/#optional-mmwave-presence-sensors","title":"(Optional) mmWave Presence Sensors","text":"<p>The Satellite1 HAT has two ports for optionally mounting external mmWave presence sensors: LD2410 or LD2450. Please read more about setting up and calibrating your presence sensors here.</p> LD2410 Mounted on Sat1 HAT LD2450 Mounted on Sat1 HAT"},{"location":"satellite1-assembly/#first-boot-powering-on","title":"First Boot - Powering On","text":"<p>The below instructions assume you have connected the HAT to the CORE and are powering the Satellite1 for the first time:</p> <ol> <li>Take a USB-C cable and plug one end into the USB socket on the Hat labeled \"CORE/ESP\".</li> <li>Plug the other end into a 9V USB-C power supply (if you want to power a speaker from the HAT), or a computer 5V USB-C connection (if you're plugging into the headphone jack). </li> <li>Upon first boot, you will see the blue LEDs count down clockwise as the device flashes the XMOS audio processor.</li> <li>Finally, the LEDs will begin to sparkle a warm white color. Congrats! Move to the next step.</li> </ol>"},{"location":"satellite1-connecting-to-ha/","title":"Connect to Home Assistant","text":""},{"location":"satellite1-connecting-to-ha/#connect-to-home-assistant-wirelessly-via-ble-improv","title":"Connect to Home Assistant Wirelessly via BLE Improv","text":"<p>Your Satellite1 arrives pre-flashed from the factory and will boot into BLE improv mode with white sparkling LEDs.  Follow the steps below to connect to Home Assistant via Bluetooth.</p> <ul> <li> <p> Open Home Assistant App</p> <p> Open Home Assistant on your iPhone or Android device with Bluetooth enabled. Navigate to \"Settings -&gt; Devices &amp; Services\" and tap \"Add\" next to your discovered Sat1 device.</p> </li> <li> <p> Configure WiFi credentials</p> <p> Type in your 2.4 Ghz WiFI credentials and click \"Connect\".</p> </li> <li> <p> Authorize the WiFi connection</p> <p> On the Sat1 HAT, press the right \"Action button\" to give authorization.</p> </li> <li> <p> Continue to next steps</p> <p> Tap \"Continue\" after successful Wifi connection.</p> </li> <li> <p> Add the Sat1 to ESPHome</p> <p> Tap \"Ok\" to begin setting up ESPHome.</p> </li> <li> <p> Select Sat1 device to add</p> <p> Tap the name of your Sat1 device and then tap the \"Submit\" button.</p> </li> <li> <p> Checking updates</p> <p> The Wizard will pull down the most recent Sat1 Firmware.</p> </li> <li> <p> Test Wake Word detection</p> <p> The Wizard will ask you to say the Wake Word twice.</p> </li> <li> <p> Select Area</p> <p> Select the Area that you Sat1 belongs in.</p> </li> <li> <p> Configure Sat1</p> <p> Stick with the default or change the Wake word, Assistant, and Voice.</p> </li> </ul> <p>Success</p> <p>You have connected your Satellite1 to Home Assistant!</p> <p>Warning</p> <p> After completing the Wizard, do NOT click to add the Sat1 to ESPHome again.  Simply refresh and this will go away.</p>"},{"location":"satellite1-connecting-to-ha/#understanding-the-esphome-user-interface","title":"Understanding the ESPHome User Interface","text":"<p>Once your Sat1 is connected to Home Assistant you should familiarize yourself with all the server-side settings you may want to change:</p> <ul> <li> <p> Select Sat1 device from list</p> <p> Inside your Home Assistant, head over to \"Settings -&gt; Devices &amp; Services -&gt; ESPHome\" and click on your Sat1 device.</p> </li> </ul> <ul> <li> <p> Explore Sat1 settings</p> <p>  Understand all the features of your Sat1 device.</p> </li> </ul>"},{"location":"satellite1-dev-kit-enclosure/","title":"Cylindrical Enclosures","text":""},{"location":"satellite1-dev-kit-enclosure/#cylindrical-dev-kit-enclosure","title":"Cylindrical Dev Kit Enclosure","text":"<p>The Satellite1 Cylendrical Enclosure is a snap-fit enclosure that can be printed on a single plate. We highly recommend PETG filament, plus some Loctite (Blu-Tack) and speaker polyfill for the best acoustic results. This is our first-generation enclosure, and many revisions will come out as we iterate the product and receive feedback.  Currently the enclosure supports three recommended speakers:</p> <ul> <li>Dayton Audio RS75-4 3\" driver</li> <li>Tectonic TEBM46C20N-4B BMR 3\" driver</li> <li>GRS 3RF-4 4\" driver (requires a slighly custom stand since it's a larger speaker)</li> </ul> <p>All the files necessary can be found in the Satellite1-Enclosures Github Repo.</p> 25 watt BMR speaker fires down towards sound diffuser cone"},{"location":"satellite1-dev-kit-enclosure/#watch-the-instructional-video","title":"Watch the Instructional Video","text":""},{"location":"satellite1-dev-kit-enclosure/#enclosure-limitations","title":"Enclosure Limitations","text":"<p>Many of the below enclosure limitations are solved by our upcoming power-over-ethernet SHOE board</p> <p>Without the SHOE board there are some current limitations of the enclosure:</p> <ol> <li> <p>The lux sensor will not give accurate readings of the room. We will solve this with a light pipe and updated enclosure designs.  This can also be solved by our upcoming SHOE board and relocating the lux sensor down in the speaker chamber.</p> </li> <li> <p>The temp/humidity sensor will not give accurate readings of the room.  Also the mmWave sensor is pointed up at the ceiling. Our upcoming \"SHOE\" PCB will relocate these sensors down into the speaker chamber while also giving a PoE port to the enclosure!</p> </li> <li> <p>The mic pipes very slightly decrease the accuracy of speech-to-text. We will solve this once we get to plastic injection molded enclosures.</p> </li> <li> <p>The wake word may not respond when playing music at full volume. We will experiment with modified enclosure designs, gaskets, and better audio echo cancellation firmware to mitigate vibrations in the enclosure.</p> </li> </ol>"},{"location":"satellite1-dev-kit-enclosure/#printing-the-dev-kit-cylindrical-enclosure","title":"Printing the Dev Kit Cylindrical Enclosure","text":"<p>The full speaker enclosure consists of 4 major parts.  If you don't have the necessary speaker you can print just the Satellite1 UFO enclosure.</p> <p></p> NOTE: Enclosures and geometry files may be specific to a hardware revision &amp; speaker model number. I want to quickly print using the pre-build slicer project file. I want to create my own project from scratch in my slicer software."},{"location":"satellite1-dev-kit-enclosure/#pre-built-slicer-project-file","title":"Pre-Built Slicer Project File","text":"<ol> <li> <p>Determine the speaker model number you're running and select the correct threaded adapter.  i.e. \"Dayton Audio RS75-4\"</p> </li> <li> <p>Download the correct pre-built <code>.3mf</code> project file from the Satellite1-Enclosures Github repository and open in your favorite slicer software.</p> <p></p> </li> <li> <p>Right-click on each part and select your desired filament. (NOTE #1: PETG-HF is better for acoustics, but PLA will work too.)  (NOTE #2: Set UFO Enclosure's \"Light Ring\" layer to transparent or white filament so you can see the LEDs.)     </p> </li> <li> <p>After slicing and printing you see this is approx a 4.5h print.  Everything is \"snap-fit\" and requires no screws.     </p> </li> </ol>"},{"location":"satellite1-dev-kit-enclosure/#custom-built-slicer-project","title":"Custom-Built Slicer Project","text":"<p>If you cannot or do not want to use our pre-built slicer project file then you can build your own plate from scratch:</p> <ol> <li>Add the necessary <code>.stl</code> geometry files to your slicer software from the Satellite1-Enclosures Github repository.</li> <li>Set your project to use the recommended settings.<ol> <li>0.2mm layer height</li> <li>3 wall loops for strength</li> <li>15% infill (increase this to 50% for the speaker enclosure for even better acoustics)</li> <li>(Optional) Arachne wall generator</li> <li>Supports are disabled EXCEPT the speaker chamber and speaker adapters have \"Build Plate Only Supports\" enabled</li> <li>No-Brim </li> </ol> </li> </ol>"},{"location":"satellite1-dev-kit-enclosure/#assembling-the-dev-kit-cylindrical-enclosure","title":"Assembling the Dev Kit Cylindrical Enclosure","text":"<ol> <li>Grab some Loctite (aka Blu-Tack) and generic speaker Polyfill.  Attach your chosen mmWave to the HAT.   </li> <li>There are three locations where you'll see 2 mounting lips on the UFO enclosure. The goal is to get the Sat1 HAT sloted underneath the smaller bottom lip in all three locations, such that the LEDs are peaking through the square cutouts and into the light ring.   </li> <li>Align the bottom (south) part of the Sat1 HAT under the bottom lip and press firmly at the top (north) of the Sat1 HAT near and around the USB-C ports and headphone jack.  Press around the parameter of the Sat1 HAT to snap in under all the bottom lips.  You'll know when you're done when the 4 buttons click perfectly.   </li> <li>If you need to remove the HAT, pull on the corner of the wall near and lift up from the USB-C ports.   </li> <li>Roll your Loctite into a \"snake\" that you wrap around the speaker to make a gasket. (This isn't required if you're using the Dayton Audio RS75-4 speaker since it has a gaskey seal built-in.)   </li> <li>Route the speaker cables up through the speaker chamber and out the top.  You only need 1 inch of cable coming out the top.    </li> <li>Add polyfill to the speaker chamber.   </li> <li>Slot your speaker into the enclosure (the speaker should not sit flush due to the gasket) and lock it in with the lock ring.    </li> <li>Choose the right speaker chamber plug based on the guage of your speaker cables and wedge it in as best as possible, leaving about 1 in of cable sticking out.  Cover the plug with Loctite.    </li> <li>Connect the JST-XH connector to the bottom of the HAT and align then snap the UFO to the speaker chamber.    </li> <li>Align the speaker stand with the lock ring's posts.  Notice the hole at the top of each leg.  Simply cut a piece of filament and slide it into each leg's hole to hold the stand in place.    </li> <li>Find the \"V\" icon on the UFO enclosure.  This is where you'll plug the USB-C cable to the HAT/CORE which powers up the device.    </li> </ol> <p>Congrats on building your own Satellite1 Dev Kit Speaker Enclosure!</p>"},{"location":"satellite1-faqs/","title":"FAQs","text":"I messed something up, how do I start over? <ol> <li>Remove the Sat1 from ESPHome</li> <li>Flash the device back to factory firmware.</li> </ol> How do I access the Sat1 logs? <p>If you want to look at the logs, click here</p> <p></p> Why is the temp sensor incorrect? <p>The temperature/humidity sensor is placed on the HAT near other warm components which cause the sensor to run hot. Look at the Sat1 settings and set a negative offset to compensate for this issue. Logically, if you put the Sat1 in the ceiling you're going to be getting the temperature for your attic, and if you place Sat1 in an enclosure you'll be getting the internal temperature.</p> <p>There are two key things to remember here:</p> <ol> <li>This is a \"Dev Kit\" and the sensors are on the device for development purposes.</li> <li>We are working on advanced enclosures which will place sensors in the correct location. Stay tuned.</li> </ol> <p></p> What wake words are supported? <p>The Satellite1 uses ESPHome's microWakeWord and supports the \"Hey Jarvis\" and \"Okay Nabu\" wake words.</p> <p></p> How do I add other wake words to the Sat1? <p>If you're a developer you can modify the Sat1 firmware and add other compatible MicroWakeWord models or even create your own custom wake word. NOTE: The more wake words you add to the firmware the less resouces your Sat1 has for other tasks.</p> <p></p> The wake word isn't always responding! <ol> <li>Try both \"Okay Nabu\" and \"Hey Jarvis\".</li> <li>\"Okay Nabu\" is more trained and may have a higher success rate.</li> <li>Speak normally. Don't scream.</li> <li>Also. Don't. Speak. Like. a Robot. Just be normal.</li> <li>Don't lean into the speaker. Stand a normal 2+ feet away.</li> <li>Make sure the microphones are not obstructed and that the device is not tucked in a shelf or something similar which causes sound reflection. Same goes with marble floors that cause echoes in the room.</li> <li>If you have an accent it's going to be harder, but not impossible.</li> <li>If you have loud water running, wind blowing, kids screaming, oven hoods running... you're gonna have a bad time.</li> </ol> <p>Still having issues? This will get better in time. We have lots of ideas to solve these problems.</p> <p></p> How do I get help or report issues? <p>Need further help or have suggestions for the product or documentation? Reach out!</p> <p>There are many ways to contact us, click here</p>"},{"location":"satellite1-flash-via-usb-c/","title":"Flash via USB-C Cable","text":"<p>Flashing your Satellite1 will erase all data on the device, and optionally your WiFi credentials setting it back to factory settings.  I will not remove the Satellite1 from your Home Assistant server instance.</p>"},{"location":"satellite1-flash-via-usb-c/#flash-your-satellite1-via-usb-c-cable","title":"Flash your Satellite1 via USB-C Cable","text":"<ol> <li>Use a data-capable USB-C cable and connect it directly to your computer.</li> <li>If the CORE is mounted to the HAT, plug into the HAT\u2019s \u201cCORE/ESP32\u201d USB-C port. Otherwise, use the CORE\u2019s USB-C port.</li> <li>Use the form below to flash Production or Beta firmware, with or without mmWave.</li> </ol> <ul> <li> <p> Select the JTAG device</p> <p> After clicking the blue \"Connect\" button, a pop-up window will open.  Select the JTAG device in the pop-up window.</p> </li> <li> <p> Start Firmware installation</p> <p> Click \"Install\".</p> </li> <li> <p> Erase the device</p> <p>  Check Erase the device if you want to remove saved WiFi credentials, then click \"Next\" and \"Install\".</p> </li> <li> <p> Installation completed</p> <p> Installation will complete. Click \"Next\".</p> </li> <li> <p> Configure WiFi</p> <p> Select your 2.4ghz WiFi network and click \"Connect\".  Your Sat1 device will begin sparkling blue while attempting to connect. If you don't see your WiFi network then click the refresh icon on the top right to scan for networks again.</p> </li> <li> <p> Connected to WiFi</p> <p> Congrats you're now connected to your Wifi! Your device will now begin sparkling red. This means it needs to be connected to ESPHome in your Home Assistant instance.</p> </li> <li> <p> Start ESP Onboarding</p> <p> Inside Home Assistant, go to \"Settings -&gt; Devices &amp; Services\" and notice you have a Discovered <code>Satellite1 xxxxxx</code> device. Click ADD and follow the ESPHome onboarding steps.</p> </li> </ul> <p>Success</p> <p>You have re-flashed your Sat1 and connected it to Home Assistant.</p>"},{"location":"satellite1-helpful-automations/","title":"Helpful Automations","text":"<p>Set up helpful blueprint automations within Home Assistant to get the most out of your Sat1 voice assistant and multi-sensor. </p>"},{"location":"satellite1-helpful-automations/#available-blueprints","title":"Available Blueprints","text":"Description Import Source Lower volume of surrounding media players in the area during voice assistant activity View YAML"},{"location":"satellite1-helpful-automations/#contribute-your-blueprints","title":"Contribute Your Blueprints","text":"<p>Want to contribute? Submit a PR to Blueprints to the GitHub repository and we'll add it to the list!</p>"},{"location":"satellite1-introduction/","title":"Introduction","text":"<p>The Satellite 1 Developer Kit is the first version of our private voice assistant hardware and is the foundation for the larger ecosystem we're building.  The Dev Kit comprises of two components that we call \"the HAT\" (round board) and \"the CORE\" (rectangular board).  When you connect these two components together you get the Satellite1 Dev Kit.</p> Animation shows how to attach the rectangular Core Board to the round Hat Board, with an optional mmWave presence sensor."},{"location":"satellite1-introduction/#quick-live-demo","title":"Quick Live Demo","text":"<p>When properly set up the Satellite1 can be even more powerful than some of the mainstream voice assistants out there.  Watch the live demo section of our launch video to get a sense of the Satellite1 capabilities:</p>"},{"location":"satellite1-introduction/#detailed-specifications-features","title":"Detailed Specifications &amp; Features","text":"<p>You can read detailed sepecifications about the hardware on their product pages.</p> <ul> <li>Satellite1 Dev Kit</li> </ul>"},{"location":"satellite1-introduction/#requirements","title":"Requirements","text":"<p>The Satellite1 has a few requirements to get up and running.</p> <ol> <li>An active installation of Home Assistant</li> <li>A 2.4 GHz WiFi network (internet is not required)</li> <li>The recommended Satellite1 accessories (see Recommended Accessories)</li> </ol>"},{"location":"satellite1-introduction/#future-modules-enclosures-ai-server","title":"Future Modules, Enclosures &amp; AI Server","text":"<p>In the future we will announce expansion modules, enclosures, and mount kits that easily connect your Satellite1 Dev Kit to make a complete product.  We will also be releasing an AI Base Station that will power all the Satellite1's in your home.</p>"},{"location":"satellite1-introduction/#satellite1-vs-home-assistant-voice-preview-edition","title":"Satellite1 vs. Home Assistant Voice Preview Edition","text":"<p>The following table compares the main features of the Sat1 and Home Assistant Voice PE products.  Both products run the same ESP32-S3 and XMOS chip.  Our firmwares are also extremely similar (by design, to increase engagement and keep the community moving together). In general, it is fair to say that the Sat1 is more feature rich, but lacks an enclosure (hence why we're a Dev Kit).  Our enclosure is coming in Q1'25 so feel free to get your Dev Kit now!</p> Feature Satellite1 Home Assistant Voice PE Microphones Four high-performance microphones (XMOS firmware uses two microphones currently.  Future firmware upgrade will utalize all 4 microphones with beamforming). Two microphones designed to hear voice commands in most environments. Speaker Output 25W speaker amplifier capable of 48 kHz audio streaming. Also allows 3.5mm jack for external speakers. Built-in 3W speaker for 48 kHz playback; includes a 3.5mm stereo jack for external speakers. Environmental Sensors Includes room temperature, humidity, and luminosity sensors; supports adding mmWave presence detection (LD2410 or LD2450). Primarily focused on voice assistance; does not include additional environmental sensors. Form Factor Available as a development kit with 4 buit-in buttons and components for assembly; official enclosure planned for future release. Comes in a ready-to-use injection-molded case with physical controls, including a mute switch and volume dial. Price $69.99 for the development kit. $59 for the Preview Edition. Power Powered by USB-C PD (Power Delivery), enabling the extra power needed for the 25W amplifier. Powered by USB-C. Expansion Includes two 40-pin expansion connectors for powerful future accessories. Grove port for limited expansion. LED Ring 24 LEDs for visual feedback. 12 LEDs for visual feedback. Software ESPHome Firmware very similar to Home Assistant Voice ESPhome firmware for Home Assistant Voice"},{"location":"satellite1-modifying-the-firmware/","title":"Modifying the Firmware","text":"<p>The firmware running on the Satellite1 is open source.  All we ask contribute back the FutureProofHomes community by submitting pull requests to the Satellite1-ESPHome repository.  You may want to modify and flash your custom firmware on the Sat1 to do the following:</p> <ul> <li>Hardcode your Wifi SSID &amp; Password</li> <li>Hardcode the Snapserver's IP address</li> <li>Add custom wake words</li> <li>Hide or show more logs for deep troubleshooting</li> <li>Change or extend the core functionality in any way you desire.</li> </ul> After taking control of your device's firmware you will no longer receive official firmware updates. If you'd like to get back in sync with the official Sat1 firmware you'll need to restore factory firmware back to the Sat1. Please also be aware that flashing custom firmware can potentially damage the Sat1 device. These instructions are provided with the understanding that you have the necessary expertise to proceed. We will assume a certain level of familiarity with the process. Proceed with caution, and enjoy the journey!"},{"location":"satellite1-modifying-the-firmware/#esphome-compatibility-matrix","title":"ESPHome Compatibility Matrix","text":"<p>Specific Sat1 firmware releases can only be compiled with specific ESPHome versions.</p> Sat1 Release ESPHome Version v0.1.3 2025.5.2 - 2025.7.5 v0.1.2 2025.5.2 v0.1.1 2025.4.2"},{"location":"satellite1-modifying-the-firmware/#import-the-sat1-to-your-esphome-dashboard-and-take-control","title":"Import the Sat1 to your ESPHome Dashboard and Take Control","text":"<p>NOTE: Your Home Assistant instance must have the ability to run \"Add-Ons\". If you cannot run add-ons, see alternate ways to run this software by reading ESPHome's official documentation.</p> <ol> <li> <p>Ensure you're running the correct ESPHome Device Builder version that follows the above ESPHome compatibility matrix: Install ESPHome Device Builder</p> </li> <li> <p>After the install is complete click \"Open Web UI\": </p> </li> <li> <p>Click \"SHOW\" to see your Sat1 devices you have not taken control of: </p> </li> <li> <p>Click \"Take Control\" and give the device a name: </p> </li> <li> <p>Wait while the firmware compiles and your Sat1 is flashed over-the-air with your new firmware. This can take a significant amount of time depending on your server's hardware specs (Recommend 8gb RAM or more to avoid compilation errors). Please be patient: </p> </li> <li> <p>When the firmware is uploaded to the Sat1, you'll see the boot logs on your screen. You can close the window and return to the ESPHome Device Builder dashboard and click the \"EDIT\" button and have fun! </p> </li> </ol> <p>Congrats.  You're done!</p>"},{"location":"satellite1-mount-kit-overview/","title":"In-Ceiling Mount Kit","text":""},{"location":"satellite1-mount-kit-overview/#in-ceiling-mount-kit-coming-soon","title":"In-Ceiling Mount Kit (Coming Soon...)","text":""},{"location":"satellite1-poe-shoe-module-overview/","title":"PoE1 Module","text":""},{"location":"satellite1-poe-shoe-module-overview/#poe1-module-coming-soon","title":"PoE1 Module (Coming Soon...)","text":"<p>If you're familiar with the Satellite1 Dev Kit, you know it consists of two PCB boards: the \"CORE\" and the \"HAT.\" The HAT includes an expansion port, which will allow you to connect our upcoming \"PoE SHOE\" module.</p> <p>The PoE SHOE Module will unlock the following features:</p> <ul> <li>Provides Power-over-Ethernet (PoE) to the Satellite1 that will power on the product and supply wired networking.</li> <li>Allows to relocate the mmWave inside the speaker chamber and position it any angle towards the room.</li> <li>Allows to relocate the temperature/humidity sensor inside the speaker chamber.</li> <li>Includes a QWIIC connector to support tons of external sensors from Sparkfun</li> </ul> SHOE board mounted to bottom of the Hat Entire assembly turned upside down"},{"location":"satellite1-powering-on/","title":"Satellite1 powering on","text":""},{"location":"satellite1-powering-on/#first-boot-unboxing-experience","title":"First Boot - Unboxing Experience","text":"<p>The below instructions assume you have connected the HAT to the CORE and are powering the Satellite1 for the first time:</p> <ol> <li>Take a USB-C cable and plug one end into the USB socket on the Hat labeled \"CORE/ESP\".</li> <li>Plug the other end into a 9V USB-C power supply (if you want to power a speaker from the HAT), or a computer 5V USB-C connection (if you're plugging into the headphone jack).</li> <li>Upon first boot, you will see the blue LEDs count down clockwise as the device flashes the XMOS audio processor chip.</li> <li>Finally, the LEDs will begin to sparkle a warm white color. Congrats! Move to the next step.</li> </ol>"},{"location":"satellite1-presence-sensors/","title":"Adding Presence Sensors","text":""},{"location":"satellite1-presence-sensors/#millimeter-wave-presence-sensors","title":"Millimeter-wave presence sensors.","text":"<p>The Satellite1 HAT has two ports for optionally mounting external mmWave presence sensors: LD2410 or LD2450.  These sensors have different possibilities, and suit different needs.  Depending on the sensor your choose you must flash the appropriate firmware to the Satellite1 using a USB-C cable.</p> <p>Flash your appropriate mmWave firmware</p> <p></p> LD2410 Mounted on Sat1 HAT LD2450 Mounted on Sat1 HAT"},{"location":"satellite1-presence-sensors/#sensor-positioning","title":"Sensor Positioning","text":"<p>When the sensor is directly mounted to the HAT it will point in the direction of the microphone and LEDs, which may work for your situation.  However, you can also make or purchase cables that allow you to position the sensor in any orientation you'd like so it is not directly mounted to the HAT.</p> <p></p> NOTE: We plan to introduce a PoE Shoe module that enables you to relocate the mmWave sensor (and other sensors) inside the enclosure\u2019s speaker chamber and position it at any angle toward the room."},{"location":"satellite1-presence-sensors/#sensor-firmware","title":"Sensor Firmware","text":"<p>Both the LD2410 &amp; LD2450 can be updated via the HLKRadarTool mobile app over bluetooth.  Watch this quick video to see how to access the sensor and change the firmware version:</p> <p> </p> <p> </p>"},{"location":"satellite1-presence-sensors/#understanding-mmwave","title":"Understanding mmWave","text":"<ol> <li>Gate: these sensors use a \"gate\" as definition of distance range. This is some range of distance, which can be tuned separately from others. Think of it as of \"onion\" layer, with center on sensor. There are 8 gates on LD2410 (plus gate 0, but it's effectively useless).</li> <li>Distance Resolution: the \"thickness\" of one gate. The LD2410 can have resolution of 75cm or 20cm per gate. With resolution of 75cm per gate, maximum distance is <code>0.75 * 8 =</code> 6 meters (sorry my Imperial-units-friends), while with 20cm it's 1.6 meters. But with latter you can achieve much better precision.</li> <li>Energy: basically \"amount of presence\" in the gate. The more actively you're moving - the more will energy there will be.</li> </ol>"},{"location":"satellite1-presence-sensors/#about-the-ld2410b","title":"About the LD2410(B)","text":"<p>This is small, but powerful sensor. It can sense motion and still human presence for distances up to 6 meters. It has a detection angle +/-60 degrees, and should be fine-tuned for best performance. Also it can see through glass walls, thin plywood etc.</p> <p> Get it on Amazon</p>"},{"location":"satellite1-presence-sensors/#configuration","title":"Configuration","text":"<p>Don't be overwhelmed with several dozens new entities that appeared after installation. They all are useful, and after fine-tuning the sensor you can disable those you not need. Let's familarize ourselves with some useful entities:</p> <ol> <li>Binary sensors:<ol> <li>Moving target - sensor of moving target presence.</li> <li>Still target - still presemce sensor. Mostly off, when moving target is present.</li> <li>Presence - main presence sensor. Populated by other two, with cooldown (see Timeout below).</li> </ol> </li> <li>Sensors:<ol> <li>Moving/still distance - sensors of the distance to corresponding target.</li> <li>G(1-8) moving/still energy - the value of energy for corresponding gate.</li> </ol> </li> <li>Switches:<ol> <li>Engineering mode - this switch will enable fine-tuning for sensor, and will report its readings to each gate in real time. Keep it off when not setting up your sensor, as it is pretty extensive operation.</li> <li>Control Bluetooth - enables built-in Bluetooth on sensor, so you could connect to it with HLK application and set it up from there. Useful, if you want to upgrade sensor firmware.</li> </ol> </li> <li>Select:<ol> <li>Distance resolution - you can choose gate length 0.75m or 0.2m</li> </ol> </li> <li>Numbers:<ol> <li>Timeout - will set the cooldown period for sensor (time from last presence detected to main presence sensor switching into \"off\" state).</li> <li>Max moving/still distance gate - will restrict sensor to certail distance. E.g. if it's set to 6, and distance resolution is 0.75 - max sensor triggering distance will be 4.5 meters.</li> <li>G(1-8) moving/still threshold  - this setting will set the threshold for presence detection for each gate (movement or still presence respectively). If amoung of energy for corresponding gate will be greater than this threshold - sensor will feel presence in that gate.</li> </ol> </li> </ol>"},{"location":"satellite1-presence-sensors/#calibration","title":"Calibration","text":"<p>The idea is simple: </p> <ol> <li>Set sensor in place, where its 120 degrees will be most useful, and catch the least of unnecessary movement.</li> <li>Turn on Engineering mode switch.</li> </ol> Sensor Placement <ul> <li>It works the best in the room corner, opposite to a table, or on the short wall of long room (e.g. bathroom). This is especially convenient, if you have shower with glass door on the opposite end.</li> <li>It won't work in rooms with fans, or when it has dishwasher, or even running water in sight.</li> </ul> <ul> <li>Set the maximum gate based on room length. If you struggle with correct number, just wave hands or jump in opposite corner, see which gate detects movement, and set that number to Max moving/still distance gate. (Don't hesitate, set threshold a bit higher - that energy values can jump!)</li> <li>And finally, calibrate it for no presence: step out, let it set down for a bit (like a minute), and adjust moving and still thresholds, so they would be higher than energy levels for corresponding gates.</li> </ul>"},{"location":"satellite1-presence-sensors/#helpful-calibration-card","title":"Helpful Calibration Card","text":"<p>We built UI card, to make calibration process more intuitive. </p> <p>Here's how to use it:</p> <ol> <li>Install Mushroom cards, Auto-entities card, Decluttering card, Vertical Stack In Card, and Bar card from HACS.</li> <li>Put this to the very bottom of dashboard YAML in raw edit mode (this should be done once per dashboard): <pre><code>decluttering_templates:\n  ld2410:\n    card:\n      type: horizontal-stack\n      cards:\n        - type: custom:vertical-stack-in-card\n          cards:\n            - type: custom:mushroom-entity-card\n              entity: switch.[[device]]_engineering_mode\n              name: Preset edit mode\n              icon_color: pink\n              layout: horizontal\n              tap_action:\n                action: toggle\n              hold_action:\n                action: more-info\n              double_tap_action:\n                action: none\n            - type: custom:mushroom-number-card\n              entity: number.[[device]]_timeout\n              name: Detection cooldown\n              layout: horizontal\n              display_mode: buttons\n            - type: custom:mushroom-select-card\n              entity: select.[[device]]_distance_resolution\n              name: Gate resolution\n              icon_color: green\n              layout: horizontal\n            - type: custom:mushroom-entity-card\n              entity: switch.[[device]]_control_bluetooth\n              icon_color: indigo\n              name: Bluetooth\n              tap_action:\n                action: toggle\n              hold_action:\n                action: more-info\n              double_tap_action:\n                action: none\n            - type: custom:mushroom-template-card\n              secondary: &gt;-\n                {{ iif(is_state(entity, 'on'), 'Detected, ' +\n                states('sensor.[[device]]_still_distance') + ' cm', 'Not\n                detected') }}\n              primary: 'Still presence'\n              icon: mdi:motion-sensor\n              entity: binary_sensor.[[device]]_still_target\n              icon_color: '{% if(is_state(entity, \"on\")) %} red {% endif %}'\n              layout: horizontal\n              multiline_secondary: false\n            - type: custom:mushroom-template-card\n              secondary: &gt;-\n                {{ iif(is_state(entity, 'on'), 'Detected, ' +\n                states('sensor.[[device]]_moving_distance') + ' cm', 'Not\n                detected') }}\n              primary: 'Moving presence'\n              icon: mdi:motion-sensor\n              entity: binary_sensor.[[device]]_moving_target\n              icon_color: '{% if(is_state(entity, \"on\")) %} red {% endif %}'\n              layout: horizontal\n              multiline_secondary: false\n          title: 'Settings: common'\n        - type: custom:decluttering-card\n          template: ld2410_gates\n          variables:\n            - device: '[[device]]'\n            - type: still\n        - type: custom:decluttering-card\n          template: ld2410_gates\n          variables:\n            - device: '[[device]]'\n            - type: moving\n  ld2410_gates:\n    card:\n      type: custom:auto-entities\n      filter:\n        template: &gt;-\n          [ \n          {{\n          dict(\n            type='custom:mushroom-number-card',\n            entity='number.[[device]]_max_[[type]]_distance_gate',\n            name='Max detection gate',\n            display_mode='buttons',\n            icon='mdi:tape-measure',\n            layout='horizontal',\n            secondary_info='none',\n            icon_color='green',\n          )\n          }},\n          {% for i in [0, 1, 2, 3, 4, 5, 6, 7, 8] %}  {{\n          dict(\n            type='custom:mushroom-number-card',\n            entity='number.[[device]]_g' + i|string + '_[[type]]_threshold',\n            display_mode='slider',\n            icon_type='none',\n            primary_info='name',\n            secondary_info='state',\n            name='Gate ' + i|string,\n            card_mod={\n              'style':\n                {\n                  'mushroom-number-value-control$': {\n                     'mushroom-slider$': '.slider { height: 24px !important;}'\n                  },\n                  '.':'mushroom-number-value-control {height: 24px;}'\n                }\n            }\n          )\n          }},\n          {{\n          dict(\n            type='custom:bar-card',\n            direction='right',\n            columns=1,\n            height=16,\n            positions=dict(\n              indicator='off',\n              icon='off',\n              name='off',\n            ),\n            entities=[\n                {\n                  'entity': 'sensor.[[device]]_g' + i|string + '_[[type]]_energy',\n                  'color': 'orange'\n                }\n              ]\n          )\n          }},\n          {% endfor %}\n          ]\n      card_param: cards\n      card:\n        type: custom:vertical-stack-in-card\n        title: 'Gates: [[type]]'\n</code></pre></li> <li>Put following card to your dashboard. Replace <code>device</code> field value with with your satellite name, as it appears in entities IDs, like <code>satellite1_92fb28</code>. <pre><code>type: custom:decluttering-card\ntemplate: ld2410\nvariables:\n    - device: satellite1_9a72b3\n</code></pre> Blue bars are threshold sliders. Orange bars are energy indicators. That's it! Happy building!</li> </ol>"},{"location":"satellite1-presence-sensors/#about-the-ld2450","title":"About the LD2450","text":"<p>This is physically bigger and even more powerful presence sensor. It can track the motion for 3 moving occupants in the room while also detecting still human presence for distances up to 8 meters. It has a detection angle +/-60 degrees, and should be fine-tuned for best performance. Also it can see through glass walls, thin plywood etc.</p> The LD2450 must be running firmware version V2.02.23090617 to work with ESPHome.  Learn how to update the firmware by reading here. <p> Get it on Amazon</p>"},{"location":"satellite1-presence-sensors/#more-information-soon","title":"More Information Soon","text":"<ul> <li>Calibration tips</li> <li>Front-end Dashboard Card</li> </ul>"},{"location":"satellite1-recommended-accessories/","title":"Recommended Accessories","text":""},{"location":"satellite1-recommended-accessories/#satellite1-power-supplies","title":"Satellite1 Power Supplies","text":"As of July 2025, The Satellite1 comes with the necessary USB-C cable and Power Adapter incldued in the Dev Kit. <p>  If you must purchase a third-party adapter we recommend a 3A @ 9V USB-C Power Delivery Adapter.  Get it on Amazon</p> <p> Don't forget some standard USB-C cables.  These have been solid in my testing:  Get it on Amazon</p>"},{"location":"satellite1-recommended-accessories/#speakers-and-connectors","title":"Speakers and Connectors","text":"<p>You can hear audio from the Satellite1 by plugging headphones or powered speakers into the 3.5 mm jack, or by connecting a single full-range 4 ohm speaker to the built-in 25 watt amplifier using the JST-XH connector on the bottom of the HAT.</p> <p></p> <p>Here are the supplies to connect a speaker to your Sat1:</p> <p> JST XH2.54-2P 2.54mm Pitch 2 Pin Male Connector Get it on Amazon</p> <p>  The Speakers we recommend depend on which enclosure you choose. See Our Speaker &amp; Enclosure Recommendations</p> <p>  For the cleanest connection between the speaker and the JST-XH cable, we recommend using spade connectors and a crimper tool. If you prefer, you can solder the cable to the speaker terminals, or simply wrap the cable around the terminals\u2014it\u2019s entirely up to you. Get it on Amazon</p>"},{"location":"satellite1-recommended-accessories/#mmwave-human-presence-detectors","title":"mmWave Human Presence Detectors","text":"<p>Your Sat1 also supports the Human Presence Sensing Radar Modules LD2410 or LD2450.  Please be sure to read about how to calibrate your mmWave sensors. Learn How to Install mmWave</p> <p> HLK-LD2410 mmWave is smaller sensor that is good at presence detection if the occupant is still in the room.  Note that this sensor can only detect one person at a time and cannot determine exactly where the person is in the room.  If multiple people are in the room it will focus on the person with the most \"energy\" or motion. Get it on Amazon</p> <p> HLK-LD2450 mmWave is a larger sensor that offers everything the ld2410 has, plus it can detect up to 3 moving persons and their position in the room.  NOTE: this sensor is not yet supported by ESPHome and we're dependent on a PR that we hope Home Assistant will soon merge. Get it on Amazon</p>"},{"location":"satellite1-set-up-voice-control/","title":"Set Up Voice Pipeline","text":"<p>In this section we will configure your Satellite1 so it can control smart devices in your home intuitively.  By the end of this section you should be able to say:</p> <ul> <li>\"Hey Jarvis, are any doors unlocked in the home?\"</li> <li>\"Hey Jarvis, lock those doors please.\"</li> <li>\"Hey Jarvis, what is the difference between a black hole and white hole?\"</li> <li>\"Hey Jarvis, close the garage door and turn on the TV then tell me a joke.\"</li> </ul>"},{"location":"satellite1-set-up-voice-control/#what-is-a-voice-pipeline","title":"What is a Voice Pipeline?","text":"<p>Think about your interaction with any voice assistant:</p> <ol> <li>Wake Word - You say a special phrase, like \"Hey, Jarvis!\"</li> <li>Speech-to-Text - Your voice command is recorded and converted to a text transcription.</li> <li>Conversation Agent - The text transcription is processed by a rules-based engine (or perhaps an LLM) which executes your command and generates a text response.</li> <li>Text-to-Speech - The text response is converted into a synthetic voice response that is played back through the speaker.</li> </ol> <p>That's a voice pipeline. It's the backbone of any voice assistant. Each step in a voice pipeline can be modified and customized to fit your needs. What wake word do you want? What language are you speaking? Do you want a standard voice response or to hear Arnold Schwarzenegger speak back to you? Do you want Home Assistant, Google, or OpenAI to process and execute your command? Follow the steps below to set up a voice pipeline for your Satellite1.</p>"},{"location":"satellite1-set-up-voice-control/#create-a-voice-pipeline","title":"Create a Voice Pipeline:","text":"<ol> <li> <p>Go to Settings -&gt; Voice Assistants -&gt; Add Assistant </p> </li> <li> <p>Name your pipeline. Select your preferred Conversation Agent, Speech-to-Text, and Text-to-Speech engine. </p> </li> </ol>"},{"location":"satellite1-set-up-voice-control/#assign-a-voice-pipeline-wake-word","title":"Assign a Voice Pipeline &amp; Wake Word","text":"<ol> <li> <p>Go to Settings -&gt; Devices &amp; Services -&gt; ESPHome and click \"1 device\" under your Satellite1 device. </p> </li> <li> <p>In the Configuration section, select your Voice Pipeline. </p> </li> <li> <p>You can also set your preferred wake word. (NOTE: If you want to build your own custom wake word, then read here) </p> </li> </ol> <p>Congratulations! You've created your own voice pipeline for your Satellite1.  Read below to expose the device you want to control to your voice assistant and build even more advanced voice pipelines.</p>"},{"location":"satellite1-set-up-voice-control/#exposing-entities","title":"Exposing Entities","text":"<p>Your home assistant likely has hundreds if not thousands of entities. If you want to use them in your voice assistant, then you need to expose them to your voice assistant. Here's how:</p> <ol> <li> <p>Go to Settings -&gt; Voice Assistants -&gt; Expose and select the entities you want to control via your voice assistant.    </p> </li> <li> <p>Enable the \"Assist\" toggle switch and consider adding alias names that you might use when referring to the entity.    </p> </li> </ol>"},{"location":"satellite1-set-up-voice-control/#standard-conversation-agents","title":"Standard Conversation Agents","text":"<p>There are two standard voice pipelines we recommend trying out to get your feet wet:</p> Home Assistant's Cloud Assist Pipeline (Requires paid Home Assistant Cloud account, response times are fast!) <p>Set up Cloud Assist Pipeline</p> Home Assistant's Local Assist Pipeline (Free and completely private, response times depend on your hardware) <p>Set up Local Assist Pipeline</p>"},{"location":"satellite1-set-up-voice-control/#local-ai-conversation-agents","title":"Local AI Conversation Agents","text":"The FutureProofHomes team is working on a Local AI Base Station that \"just works\". Therefore, these docs will avoid sending you down a deep local AI rabbit hole. :) Thanks for your patience &amp; stay tuned! <p>Once you have a standard pipeline running, you can upgrade to a Generative AI conversation agent. This allows your voice assistant to respond to natural, conversational commands\u2014such as \u201cIt\u2019s dark in here\u201d to turn on the lights\u2014instead of requiring specific phrases like \u201cTurn on the living room lights.\u201d</p> <p>Keep in mind that running fully local Generative AI LLMs is not for the faint of heart. Results can vary depending on the model you choose (e.g., Llama, Qwen), how many entities you expose and how they\u2019re named, your GPU\u2019s capabilities (more VRAM is better), and many other factors.</p> <p>If you\u2019re ready to take on the challenge, here are some tutorial videos to help you get started. Good luck!</p> Ollama AI Powered Conversation Agent (Free, requires a GPU, and can be hard to set up with simi-reliable function calling.) <p>Set up Ollama Conversation Agent</p>"},{"location":"satellite1-set-up-voice-control/#cloud-ai-conversation-agents","title":"Cloud AI Conversation Agents","text":"<p>Warning: You are entrusting a cloud-based artificial intelligence that does not protect your privacy with control over your home. Proceed with caution!</p> Google AI Conversation Agent (Free, but will collect your data.) <p>Set up Google AI Conversation Agent</p> OpenAI ChatGPT Conversation Agent (Expensive, and not open at all, despite the marketing name, and will collect your data.) <p>Set up OpenAI ChatGPT Conversation Agent</p> <p>NOTE: The following prompt has perfomed well with both OpenAI and Google's conversation agents.</p> <pre><code>Your name is Jarvis and you are a voice assistant for Home Assistant.\nAnswer questions about the world truthfully.\nAnswer in plain text without markdown language. \nKeep responses simple and to the point.\nAlways use 12hr time formats.\n</code></pre> <p></p>"},{"location":"satellite1-set-up-voice-control/#combine-conversation-agents","title":"Combine Conversation Agents","text":"Combine a standard conversation agent with an AI conversation agent (It's like magic!) <p>A \"fall back\" pipeline will first use a non-AI conversation agent to process your request, and if that fails it will fall back to your preferred AI conversation agent. Combining these two conversation agents results in an almost magical voice experience and is highly recommended.</p> <p>Simply toggle on the \"Prefer handling commands locally\" switch underneath your Generative AI conversation agent:</p> <p></p>"},{"location":"satellite1-squircle-enclosures/","title":"Squircle Enclosures","text":""},{"location":"satellite1-squircle-enclosures/#overview","title":"Overview","text":"<p>The \"Squircle Enclosure Family\" for the Satellite1 Dev Kit includes three optional speaker chamber sizes\u2014small (1-inch), medium (2.5-inch), and large (3-inch)\u2014with the top components of the design remaining identical across all sizes. The entire enclosure is designed to be assembled using M3 x 8mm screws.</p> Large, Medium, and Small Squircle Enclosures"},{"location":"satellite1-squircle-enclosures/#understanding-the-design","title":"Understanding the Design","text":"<p>The \"Top Plate\", \"Diffuser Ring\", \"PCB Spacer\" &amp; \"Lock Ring\" are common parts that are shared across all sizes of the squircle enclosure family.</p> Cross-section of the Squircle Enclosure <p>You can inpect individual .STEP and .STL files in the Satellite1-Enclosures repository.  We cannot release CAD project files due to commercial licensing restrictions.</p>"},{"location":"satellite1-squircle-enclosures/#choose-a-speaker-and-enclosure-size","title":"Choose a Speaker and Enclosure Size","text":"<ul> <li> <p> Large (3-Inch) Speaker Enclosure</p> <p></p> <ul> <li>Dayton Audio PC83-4</li> <li>Dayton Audio RS75-4</li> <li>GRS 3FR-4</li> <li>Visaton FRS8-4</li> <li>Tectonic TEBM46C20N-4B BMR</li> <li>FaitalPRO 3FE25</li> </ul> </li> <li> <p> Medium (2-Inch) Speaker Enclosure</p> <p></p> <ul> <li>Dayton Audio ND65-4</li> <li>Dayton Audio ND64-4</li> <li>Dayton Audio PC68-4</li> </ul> </li> <li> <p> Small (1-Inch) Speaker Enclosure</p> <p></p> <ul> <li>DWEII 4pcs Mini Speaker Dupont Connectors</li> <li>AOICRIE 2pcs 3 Watt Mini Dupont Connectors</li> </ul> </li> </ul>"},{"location":"satellite1-squircle-enclosures/#how-to-3d-print-the-enclosures","title":"How to 3D Print the Enclosures","text":"<p>Download the appropriate pre-built <code>.3mf</code> project file and open in your favorite slicer software:</p> <ul> <li>Download OrcaSlicer Project</li> <li>Download Bambu Studio Project</li> </ul> <p>Remove unnecssary plates, depending on your speaker selection, enclosure type, and whether your printer supports multi-material or multi-part printing.</p> <p>Recommend PETG-HF</p> <p>We recommend PETG-HF with 30% infill for ideal for acoustics. PLA with 15% infill will work as well.</p> <p>No Supports Required</p> <p>Study the screenshot above and you'll see how to print each part such that no supports are needed.</p> <p>Screws Are Required</p> <p>M3 x 8mm screws are required for assembly. To maintain thread integrity, minimize repeated installation and removal of screws.</p> <p>Sensors are not supported, yet</p> <p>Enclosing a \"Dev Kit\" affects sensor accuracy\u2014lux, temperature, and humidity readings won\u2019t reflect the room, and the top plate is not designed to support mmWave sensors.  Our upcoming power-over-ethernet SHOE board and an PoE mid-plate will relocate the sensors into the speaker chamber and add a PoE port to the enclosure.</p> <p>When playing music at full volume the wake word may not respond</p> <p>This is caused by vibrations traveling through the enclosure to the microphones. We're working with experts to address this in the official injection-molded enclosures. Stay tuned.</p>"},{"location":"satellite1-squircle-enclosures/#assemble-the-enclosure","title":"Assemble the Enclosure","text":""},{"location":"satellite1-squircle-enclosures/#top-plate-assembly","title":"Top Plate Assembly","text":"<ul> <li> <p> Install Diffuser Ring</p> <p> If you printed the diffuser ring as a separate part, apply light pressure around the ring to snap it in place. If you used our multi-material print, you can skip this step.</p> </li> <li> <p> Align the FPH Logos</p> <p> Find the two FPH logos on the top plate and lock ring. Line up the logos and the I/O ports.</p> </li> <li> <p> Snap Parts Together</p> <p> Sandwich the logos together and you'll feel both parts snap together.</p> </li> <li> <p> Practice Locking &amp; Unlocking</p> <p> Practice rotating the two parts. When the FPH logo is visible, the top plate is unlocked and can be mounted/unmounted from the speaker chamber.</p> </li> <li> <p> Align PCB Spacer to HAT</p> <p> Align all four holes on the PCB spacer to the holes on the HAT. The taller standoffs will be closest to the I/O ports.</p> </li> <li> <p> Drop Dev Kit Into Position</p> <p> Align the HAT's headphone jack with the round I/O port. Press the CORE board into the HAT board, ensuring the PCB spacer stays in place.</p> </li> <li> <p> Secure the Dev Kit to the Top Plate</p> <p> By hand, secure the Dev Kit to the top piece with four M3 x 8mm screws. Do not overtighten the screws.</p> </li> </ul> <p>Success</p> <p>You have built your Satellite1 Squircle Top Plate!</p>"},{"location":"satellite1-squircle-enclosures/#mid-plate-assembly","title":"Mid-Plate Assembly","text":"<ul> <li> <p> Find Nubs</p> <p> Look closely at the mid-plate and feel the bottom side of the threads. You'll find four little nubs and holes that should align.</p> </li> <li> <p> Align Mid-Plate &amp; Threads</p> <p> Align the two parts using the nubs so that the I/O ports point north, toward the back of the enclosure.</p> </li> <li> <p> Screw Mid-Plate &amp; Threads Together</p> <p> Flip the mid-plate over and screw the two parts together with four M3 x 8mm screws.</p> </li> <li> <p> Unlock Top Piece</p> <p> Unlock the top piece and ensure the FPH logo is pointing north.</p> </li> <li> <p> Mount Top Piece to Mid-Plate</p> <p> Place the unlocked top piece over the threads so the FPH logo is pointing north, over the back of the enclosure.</p> </li> <li> <p> Practice Locking &amp; Unlocking</p> <p> Rotate the lock ring clockwise to lock the top piece in place. Practice locking and unlocking the top piece.</p> </li> </ul> <p>Success</p> <p>You have built your Satellite1 Squircle Mid-Plate!</p>"},{"location":"satellite1-squircle-enclosures/#speaker-chamber-assembly","title":"Speaker Chamber Assembly","text":"<ul> <li> <p> Slide Mid-Plate Into Position</p> <p> Slide the mid-plate into the speaker chamber.</p> </li> <li> <p> Screw Down Mid-Plate</p> <p> Secure the mid-plate with four M3 x 8mm screws.</p> </li> <li> <p> Connect Speaker Cable</p> <p> Connect the JST-XH 2.54 mm speaker cable connector to the HAT. (NOTE: You can also use Dupont cables if absolutely necessary.)</p> </li> <li> <p> Install Speaker Plug</p> <p> Drop the speaker cable down through the mid-plate, leaving enough length to assemble easily. Use the speaker chamber plug and optional Blu-Tack reusable adhesive to create an airtight seal.</p> </li> <li> <p> Lock Top Piece</p> <p> Position the unlocked top piece over the mid-plate threads with the FPH logo facing north, toward the back of the enclosure. Twist the lock ring clockwise to secure it.</p> </li> <li> <p> Add Polyfill</p> <p> Add a generous amount of polyfill to the speaker chamber, leaving some room for air to flow through the ported vent.</p> </li> <li> <p> Secure &amp; Connect Speaker</p> <p> Screw your chosen speaker to its corresponding faceplate with four M3 x 8mm screws. Connect the speaker cable to the speaker. (NOTE: You can solder or wrap the speaker cables if absolutely necessary.)</p> </li> <li> <p> Screw Down Faceplate</p> <p> Screw down the faceplate with six M3 x 8mm screws. Optionally use Blu-Tack reusable adhesive behind the faceplate to create an airtight seal.</p> </li> <li> <p> Push in Anti-Slip Ring</p> <p> If you printed the TPU anti-slip ring, feel free to push it in now.</p> </li> <li> <p> Connect USB-C Power</p> <p> Connect the USB-C cable to the receptacle to the right of the headphone jack.</p> </li> </ul> <p>Success</p> <p>You have built your Satellite1 Squircle Enclosure!  Time to go play some music.</p>"},{"location":"satellite1-streaming-music/","title":"Streaming Music","text":"<p>Sure, your new Satellite1 can control smart devices in your home, but what about streaming music?  </p> <p>This guide will show you how to stream music to one or many Sat1 devices around your home using Music Assistant, an open-source music player for Home Assistant that supports a wide range of providers, including Spotify, Apple Music, YouTube Music, and more.</p>"},{"location":"satellite1-streaming-music/#install-music-assistant","title":"Install Music Assistant","text":"<p>There are a few ways to install Music Assistant. Please read more here:</p> <p>Install Music Assistant</p>"},{"location":"satellite1-streaming-music/#add-a-music-provider","title":"Add a Music Provider","text":"<p>Add a music provider like Spotify, Apple Music, YouTube Music, or many other sources by following the instructions below.</p> <p>You must have a paid subscription to some of these music providers to use them with Music Assistant.</p> <p>Connect a Music Provider to MA</p>"},{"location":"satellite1-streaming-music/#add-sat1-via-home-assistant-protocol","title":"Add Sat1 via Home Assistant Protocol","text":"<p>If you don't care about synchronized multi-room music playback, this is a great way to get started.  </p> <ul> <li> <p> Add HA Player Provider</p> <p> Go to \"Settings -&gt; Add Player Provider\" and select \"Home Assistant MediaPlayers\".</p> </li> <li> <p> Import HA Media Players</p> <p> Select the Home Assistant media players you want Music Assistant to stream music to.</p> </li> <li> <p> Name Your HA Speakers</p> <p> Go to MA \"Settings -&gt;  icon\" and select \"Configure\". Name your Sat1 and keep the HA settings at default.</p> </li> </ul>"},{"location":"satellite1-streaming-music/#add-sat1-via-snapcast-protocol","title":"Add Sat1 via Snapcast Protocol","text":"<p>If you have multiple Satellite1 devices, you can use our Snapcast implementation to stream synchronized multi-room music or even pair two Sat1 speakers together for true left/right stereo sound.</p> <p>Software Requirements</p> <ul> <li>Sat1 must be running firmware v1.0.3 or higher.</li> <li>Home Assistant should be running 2025.7.x or higher.</li> <li>Music Assistant should be running 2.5.7 or higher.</li> </ul> <p>Network Requirements</p> <ul> <li>Ports 1704 &amp; 1705 must be open for the Snapserver to communicate with the Sat1 Snapclient.</li> <li>Ports 4953 through 5153 must be open per Music Assistant's Snapcast requirements.</li> <li>mDNS is recommended for the Snapserver to autodetect the Sat1 Snapclient.</li> </ul> <ul> <li> <p> Add Snapcast Player Provider</p> <p> Go to MA \"Settings -&gt; Add Player Provider\" and select \"Snapcast\" to install the Snapserver. Leave all the server settings at default.</p> </li> <li> <p> Name Your Sat1 Snapcast Speakers</p> <p> Go to MA \"Settings -&gt;  icon\" and select \"Configure\". Name your Sat1 and keep the Snapclient settings at default.</p> <p>Sat1 Snapcast Speaker(s) Missing?</p> <ul> <li>Power cycle the Sat1.</li> <li>Play music on any visible Snapcast speaker to view the hidden speakers grouped with it.  This can happen after snapserver restarts.</li> <li>Check that the correct ports are open.</li> <li>Manually add your Snapserver's IP address to the Sat1's firmware.  Read more here.</li> </ul> </li> </ul>"},{"location":"satellite1-streaming-music/#dsp-to-achieve-better-sound","title":"DSP to Achieve Better Sound","text":"<p>Using Music Assistant's DSP equalizer can significantly improve the sound quality of your Sat1.</p> <ul> <li> <p> Open Speaker DSP Settings</p> <p> Go to MA \"Settings -&gt;  icon\" and select \"Open DSP Settings\".</p> </li> <li> <p> Adjust DSP</p> <p> Adjust the DSP settings to your liking.</p> <p>Read about DSP</p> <ul> <li>DSP Parametric EQ</li> <li>DSP Tone Controls</li> </ul> </li> </ul> <p>DSP &amp; Snapcast Speaker Grouping</p> <p>All speakers in a Snapcast group will adopt the main speaker's DSP equalizer settings.  In the future we will have individual equilizers built-in to the Sat1.</p>"},{"location":"satellite1-streaming-music/#snapcast-multi-room-music-playback-dynamic-grouping","title":"Snapcast Multi-Room Music Playback &amp; Dynamic Grouping","text":"<p>This will enable you to dynamically add or remove speakers to a group for synchronized multi-room music playback.</p> <ul> <li> <p> Play Music on Main Speaker</p> <p> Click a track, choose \"Play On\", select your main speaker, then click the track again and choose \"Play Now\".</p> </li> <li> <p> Show All Speakers</p> <p> Open the Now Playing side panel by clicking the  icon.</p> </li> <li> <p> Manage Speaker Group</p> <p> Click in the blank area next to the song tile to expand and view all Snapcast speakers. Select or deselect speakers to add or remove them from the group.</p> <p>Sat1 Snapcast Speaker(s) Drifting Out of Sync or Stuttering?</p> <ul> <li>Restart Music Assistant (this restarts the Snapserver).</li> <li>Restart Sat1</li> <li>Turn off Music Assistant DSP Equalizer on all speakers</li> <li>Run your own Snapserver instead of the one built-in to Music Assistant </li> <li>Make sure your Sat1 has a good Wi-Fi connection</li> </ul> </li> </ul>"},{"location":"satellite1-streaming-music/#snapcast-multi-speaker-stereo-playback-static-grouping","title":"Snapcast Multi-Speaker Stereo Playback &amp; Static Grouping","text":"<p>This feature lets you semi-permanently group Sat1 speakers, such as combining all your upstairs speakers into one group or pairing two Sat1 speakers for stereo sound.</p> <ul> <li> <p> Create a Group Player</p> <p> Go to MA \"Settings -&gt;  icon\" and select \"Add Group Player\".</p> </li> <li> <p> Name the Stereo Pair Group</p> <p> Select \"Snapcast Group Type\". Keep \"Dynamic Group\" off. Give the group a name and add the two Sat1 speakers you want in the stereo pair.</p> </li> <li> <p> Set Channel Output</p> <p> In Home Assistant, navigate to \"Settings -&gt; Devices &amp; Services -&gt; ESPHome\" and set the correct \"Speaker Channel Output\" for each speaker.</p> <p>Tips:</p> <ul> <li>Channel selection only relates to the built-in speaker and not audio coming out of the headphone jack.</li> <li>If Music Assistant's volume control is not controlling all speakers in the group, then restart things.</li> </ul> </li> </ul>"},{"location":"satellite1-streaming-music/#controlling-music-with-your-voice","title":"Controlling Music with Your Voice","text":"<p>Beta Feature Zone!</p> <p>These capabilities are still rough around the edges. Please be patient. :)</p> <p>Not only do we want to say, \"Hey Jarvis, turn down the volume\" or \"Hey Jarvis, play the next song\", but we also want to say, \u201cHey Jarvis, play the Beatles,\u201d and have it play on that speaker (or at least ask which speaker to use). Currently, this is hard to do, but not impossible.</p> <p>To achieve all this, I highly recommend reading Music Assistant\u2019s Voice Support Repository. However, I have personally found these implementations to be cumbersome and unreliable and instead have been using a different solution I'll share here (although it does currently require cloud AI).</p> <ul> <li> <p> Cloud AI Conversation Agent</p> <p> Use a voice pipeline with a Cloud AI conversation agent. Tick on \"Prefer handling commands locally\" to get the best results.</p> </li> <li> <p> Edit Speaker Device</p> <p> In Home Assistant, navigate to \"Settings -&gt; Devices &amp; Services -&gt; Music Assistant\" and open the context menu to \"Edit Device\" for each speaker.</p> </li> <li> <p> Good Naming Conventions</p> <p> Give the device an intuitive name. Be sure to assign an area. Click Update.</p> </li> <li> <p> Entity Settings</p> <p> Click on the newly renamed device to see all its entities. Then click on the actual media player entity in the controls section. Click the settings  icon.</p> </li> <li> <p> Expose Speaker to Assist</p> <p> Click on \"Voice assistants\" and toggle on \"Assist\" to expose the Music Assistant speaker to your voice assistant.</p> </li> </ul> <p>My Results:</p> <ul> <li>Playing a song by artist or track name works fairly well.  </li> <li>If you don\u2019t specify a speaker, it sometimes chooses the right one automatically; therefore it is best to explicitly specify which speaker you want to control.  </li> <li>You can\u2019t control multiple speakers in an area (yet).  </li> <li>You can\u2019t group or ungroup Snapcast speakers (yet).  </li> </ul>"},{"location":"satellite1-troubleshooting/","title":"Troubleshooting","text":""},{"location":"satellite1-troubleshooting/#inspecting-sat1-esp32-logs","title":"Inspecting Sat1 ESP32 Logs","text":"<ol> <li>Connect the Sat1 to your computer using a USB-C cable. </li> <li>Click the connect button below and select the correct JTAG device.</li> <li>Choose Logs &amp; Console:</li> </ol>"},{"location":"satellite1-troubleshooting/#debugging-your-voice-pipeline","title":"Debugging your Voice Pipeline","text":"<p>Curious why your Sat1 is doing something different than what you'd expect?  Use Home Assistant pipeline debugging tools.</p> <p></p> <ol> <li>Determine what pipeline your Sat1 is using by retracing these steps: Assign a Voice Pipeline &amp; Wake Word to your Satellite1</li> <li>In Home Assistant, go to Settings -&gt; Voice Assistants and select the 3 dots next to that pipeline.</li> <li>Read here: Debugging a Voice Pipeline</li> </ol>"},{"location":"satellite1-troubleshooting/#inspect-sat1-audio-recording-files","title":"Inspect Sat1 Audio Recording Files","text":"<p>Follow these steps to store a copy of your audio recordings in your Home Assistant server for inspection.</p> <ol> <li>Modify your <code>configuration.yaml</code> file and add the following:</li> </ol> <pre><code>assist_pipeline:\n  debug_recording_dir: /share/assist_pipeline\n</code></pre> <ol> <li>Now go to that path in your Home Assistant (recommend using Studio Code Server) and listen to the files there.</li> <li>Don't leave this on forever, it will clog up your server with audio recordings.</li> </ol>"},{"location":"satellite1-troubleshooting/#clear-wifi-credentials-to-restart-ble-improv","title":"Clear WiFi Credentials to Restart BLE Improv","text":"<ol> <li> <p>Press and hold the RIGHT (Action) button for approximately 22 seconds until the red LEDs complete their clockwise circle.  When the LEDs glow blue you can release the action button and wait as the XMOS chip is erased.  This process may take a few minutes before the Satelllite1 finally reboots to the factory firmware.  Upon first boot you will see the blue LEDs complete another clockwise circle indicating the XMOS is being flashed with the facory embedded firmware.</p> </li> <li> <p>Follow the steps to Add your Satellite1 to Home Assistant</p> </li> </ol>"},{"location":"satellite1-troubleshooting/#removing-the-sat1from-esphome","title":"Removing the Sat1from ESPHome","text":"<ol> <li>In your Home Assistant, go to Settings -&gt; Devices and Services -&gt; ESPHome and click the 3 dots next to the Satellite1 and select \"Delete\".     </li> <li>If you \"Took Control\" of the Sat1 in your ESP Home Device Builder then go to Settings -&gt; Add-Ons -&gt; ESPHome Device Builder and open the Web UI to click the 3 dots next to the Satellite1 and select \"Delete\".     </li> </ol>"},{"location":"satellite1-troubleshooting/#force-the-core-board-into-boot-mode","title":"Force the CORE Board into Boot Mode:","text":"<ol> <li>Unplug the Sat1 from power.</li> <li>If the CORE is mounted to the HAT, press and hold the Right/Action button on the HAT, then apply power to the HAT's \"ESP32/CORE\" USB-C port.  Let go of the Right/Action button after 3 seconds. </li> <li>If the CORE is NOT mounted to the HAT, press and hold the \"Boot\" botton on the CORE, then apply power to the CORE's USB-C port.  Let go of the \"Boot\" button after 3 seconds. </li> <li>From here you can Flash the Sat1 via a USB-C cable</li> </ol>"},{"location":"satellite1-troubleshooting/#need-more-help","title":"Need More Help?","text":"<p>While we hope this documentation will answer all your questions, but we realize support is sometimes needed.  The FutureProofHomes team will do their best to keep up with support requests, but we also lean on our community to help all of us.  See the links below and decide which method of support is best for your needs.</p> <p>Have a general question and need quick help from the community?</p> <p>Chat with the Community on Discord </p> <p>Do you have a feature request you'd love to see?</p> <p>Look through our existing Feature Requests first, then open a new request if necessary:  Request a New Feature on Github </p> <p>Have you found a reproducible issue with the hardware or software? </p> <p>Report a Bug on Github </p>"}]}